! File: pi_mc.f08
! Author: Alec Wills
! Date: 04/04/18
! Purpose: To estimate the value of pi with a Monte Carlo simulation.

! Begin program:
PROGRAM pi_mc

USE chapman_random

! Require explicit variable declaration
IMPLICIT NONE


! VARIABLE DICTIONARY
! ======================
REAL(8) :: pi                     ! Value of pi to estimate
REAL(8) :: randx, randy           ! Random point generated by subroutine calls
INTEGER :: count, success         ! Count of how many points pass criterion
INTEGER :: iseed                  ! Seed to input
INTEGER, ALLOCATABLE :: iseedarr(:) ! For use in the intrinsic seed setting
INTEGER :: i                      ! Loop counter
INTEGER :: NUM                    ! User input how many points to sample
CHARACTER(1) :: choice            ! User input to choose Chapman or intrinsic

! EXECUTION OF PROGRAM
! ======================

! Ask user which subroutine to use
WRITE(*,*) "Would you like to use Chapman's subroutine? (y/n)"
WRITE(*,*) "If not, Fortran's intrinsic subroutines will be used, &
           &which is seeded with random data from the operating system."
READ(*,*) choice


! Ask user to specify number of points to sample
WRITE(*,*) "How many points (integer) would you like to use in your estimate?"
READ(*,*) NUM


! Initialize count to 0, pass to 0
count = 0
success = 0
! If user chose to use Chapman's version, begin
IF (choice == 'y') THEN
   ! Ask user to input a seed
   WRITE(*,*) "Please input the (integer) pseudorandom seed."
   READ(*,*) iseed
   
   CALL seed(iseed)
   DO i=1, NUM
      IF (MODULO(i, 1000) == 0) THEN
         WRITE(*,*) "Step ", i, "of ", NUM
      END IF
      CALL random0(randx)
      CALL random0(randy)
      count = count + 1
      IF ( SQRT(randx**2 + randy**2) <= 1.0 ) THEN
         success = success + 1
      END IF
   END DO
ELSE IF (choice == 'n') THEN
   CALL RANDOM_SEED()  ! Resets the seed in intrinsic function to random seed
   DO i=1, NUM
      IF (MODULO(i, 1000) == 0) THEN
         WRITE(*,*) "Step ", i, "of ", NUM
      END IF
      CALL RANDOM_NUMBER(randx)
      CALL RANDOM_NUMBER(randy)
      count = count + 1
      IF ( SQRT(randx**2 + randy**2) <= 1.0 ) THEN
         success = success + 1
      END IF
   END DO
ELSE
   WRITE(*,*) "Invalid choice. Terminating program."
   STOP 1
END IF

! Pi should be four times the fraction of points inside the circle
! Convert each integer to double precision real
pi = 4*DBLE(success)/DBLE(count) 

WRITE(*,*) "A total of ", success, " points matched the criterion, yielding&
           & a value of pi = ", pi

! END PROGRAM
! ======================

STOP 0
END PROGRAM pi_mc
